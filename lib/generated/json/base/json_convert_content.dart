// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_app/entities/user_entity.dart';
import 'package:flutter_app/generated/json/user_entity_helper.dart';
import 'package:flutter_app/entities/profile_entity.dart';
import 'package:flutter_app/generated/json/profile_entity_helper.dart';
import 'package:flutter_app/entities/config_entity.dart';
import 'package:flutter_app/generated/json/config_entity_helper.dart';
import 'package:flutter_app/entities/oauth_entity.dart';
import 'package:flutter_app/generated/json/oauth_entity_helper.dart';
import 'package:flutter_app/entities/version_entity.dart';
import 'package:flutter_app/generated/json/version_helper.dart';
import 'package:flutter_app/pages/opportunity/entities/opportunity_entity.dart';
import 'package:flutter_app/generated/json/opportunity_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case UserEntity:
			return userEntityFromJson(data as UserEntity, json) as T;			case ProfileEntity:
			return profileEntityFromJson(data as ProfileEntity, json) as T;			case ConfigEntity:
			return configEntityFromJson(data as ConfigEntity, json) as T;			case ConfigFlurry:
			return configFlurryFromJson(data as ConfigFlurry, json) as T;			case ConfigLogin:
			return configLoginFromJson(data as ConfigLogin, json) as T;			case OAuthEntity:
			return oAuthEntityFromJson(data as OAuthEntity, json) as T;			case VersionEntity:
			return versionEntityFromJson(data as VersionEntity, json) as T;			case OpportunityEntity:
			return opportunityEntityFromJson(data as OpportunityEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case UserEntity:
			return userEntityToJson(data as UserEntity);			case ProfileEntity:
			return profileEntityToJson(data as ProfileEntity);			case ConfigEntity:
			return configEntityToJson(data as ConfigEntity);			case ConfigFlurry:
			return configFlurryToJson(data as ConfigFlurry);			case ConfigLogin:
			return configLoginToJson(data as ConfigLogin);			case OAuthEntity:
			return oAuthEntityToJson(data as OAuthEntity);			case VersionEntity:
			return versionEntityToJson(data as VersionEntity);			case OpportunityEntity:
			return opportunityEntityToJson(data as OpportunityEntity);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'UserEntity':
			return UserEntity().fromJson(json);			case 'ProfileEntity':
			return ProfileEntity().fromJson(json);			case 'ConfigEntity':
			return ConfigEntity().fromJson(json);			case 'ConfigFlurry':
			return ConfigFlurry().fromJson(json);			case 'ConfigLogin':
			return ConfigLogin().fromJson(json);			case 'OAuthEntity':
			return OAuthEntity().fromJson(json);			case 'VersionEntity':
			return VersionEntity().fromJson(json);			case 'OpportunityEntity':
			return OpportunityEntity().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'UserEntity':
			return List<UserEntity>();			case 'ProfileEntity':
			return List<ProfileEntity>();			case 'ConfigEntity':
			return List<ConfigEntity>();			case 'ConfigFlurry':
			return List<ConfigFlurry>();			case 'ConfigLogin':
			return List<ConfigLogin>();			case 'OAuthEntity':
			return List<OAuthEntity>();			case 'VersionEntity':
			return List<VersionEntity>();			case 'OpportunityEntity':
			return List<OpportunityEntity>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}
